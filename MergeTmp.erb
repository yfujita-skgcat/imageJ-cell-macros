<%# encoding: utf-8 %>
<%= ERB.new(File.open("CommonFunction.txt", "r:UTF-8").read, nil, nil, "_erbout1").result(binding) %>

macro "Merge channel tmp..." {
  print("\\Clear");

  src_dir = getDirectory("Select input directory.");
  dst_dir = getDirectory("Select ouput directory.");
  log_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".log";
  File.saveString(getInfo("log"), log_file);
  log_info("Merge Channel macro  Ver 0.0.1");
  log_info("Authors:: Yoshihiko Fujita   (yoshihiko.fujita@cira.kyoto-u.ac.jp)");
  log_info("Copyright:: Copyright (C) 2018 Yoshihiko Fujita. All rights reserved.");
  log_info("License:: BSD licence");

  // ファイル変換後の形式のCheckboxGroup設定.
  items = newArray(1);
  items[0] = "tiff";

  // logging
  log_levels = newArray(5);
  log_levels[0] = "debug";
  log_levels[1] = "info";
  log_levels[2] = "warn";
  log_levels[3] = "error";
  log_levels[4] = "fatal";

  sat_int = newArray(2);
  sat_int[0] = "4095";
  sat_int[1] = "65534";

  // default value
  def_max_int       = "4095";
  def_channel1      = ".*Transillumination.*$";
  def_channel1_ball = 0;
  def_channel2      = ".*FITC.*$";
  def_channel2_ball = 200;
  def_channel3      = ".*Cy5.*$";
  def_channel3_ball = 200;
  def_subdir        = false; // false
  def_batch         = false; // false
  def_interval      = 1;

  config = load_config("MergeImage");
  default = newArray("0", "0", "5", "info", ".*Transillumination.*$", "0", ".*FITC.*$", "0", ".*Cy5.*$", "0");
  if(config.length != default.length){
    config = default;
  }

  Dialog.create("Settings.");
  Dialog.addMessage("Macros can be stopped by ESC");
  Dialog.addCheckbox("Calculate all files in subdirectories?", config[0]);
  Dialog.addCheckbox("Batch mode", config[1]);
  Dialog.addNumber("Interval each step (sec, ignore if bachmode)", config[2]);
  Dialog.addChoice("log level",  log_levels, config[3]);
  Dialog.addString("channel1 (regular expression):", config[4]);
  Dialog.addNumber("Subtract background for channel1 (ball radius, 0 is OFF, default 0):", config[5]);
  Dialog.addString("channel2 (regular expression):", config[6]);
  Dialog.addNumber("Subtract background for channel2 (ball radius, 0 is OFF, default 0):", config[7]);
  Dialog.addString("channel3 (regular expression):", config[8]);
  Dialog.addNumber("Subtract background for channel3 (ball radius, 0 is OFF, default 0):", config[9]);


  log_debug("===");
  Dialog.show();

  config[0]  = Dialog.getCheckbox(); // subdir
  config[1]  = Dialog.getCheckbox(); // batch
  config[2]  = Dialog.getNumber(); // interval
  config[3]  = Dialog.getChoice(); // log level
  config[4]  = Dialog.getString(); // channel1 filter
  config[5]  = Dialog.getNumber(); // channel1 ball
  config[6]  = Dialog.getString(); // channel2 filter
  config[7]  = Dialog.getNumber(); // channel2 ball
  config[8]  = Dialog.getString(); // channel3 filter
  config[9]  = Dialog.getNumber(); // channel3 ball

  save_config("MergeImage", config);

  recursive       = config[0];
  batchmode       = config[1];
  interval        = config[2];
  log_level_str   = config[3];
  channel1_filter = config[4];
  channel1_ball   = config[5];
  channel2_filter = config[6];
  channel2_ball   = config[7];
  channel3_filter = config[8];
  channel3_ball   = config[9];

  if(batchmode){
    log_info("batchmode = TRUE");
  } else {
    log_info("batchmode = FALSE");
  }

  if(log_level_str == "debug") {
    log_level = 1;
  } else if(log_level_str == "info") {
    log_level = 2;
  } else if(log_level_str == "warn") {
    log_level = 3;
  } else if(log_level_str == "error") {
    log_level = 4;
  } else if(log_level_str == "fatal") {
    log_level = 5;
  } else {
    log_fatal("log level not found. Enter unexpectd code.");
    return 0;
  }

  log_info("log level = " + log_level);

  file_list = find_recursive_dir(src_dir, recursive);

  if(file_list.length < 1){
    log_info("File not found.");
    return 0;
  }


  setBatchMode(batchmode);
  if(batchmode){
    interval = 0;
  }

  // image separation
  log_info("Starting file separation...");
  channel1_images = newArray(0);
  channel2_images = newArray(0);
  //channel3_images = newArray(0);
  for(i=0; i < file_list.length; i++){
    fpath = file_list[i];
    fname = File.getName(fpath);
    if(matches(fname, channel1_filter)){
      channel1_images = Array.concat(channel1_images, fpath);
    } else if(matches(fname, channel2_filter)){
      channel2_images = Array.concat(channel2_images, fpath);
    //} else if(matches(fname, channel3_filter)){
    //  channel3_images = Array.concat(channel3_images, fpath);
    } else {
      log_info("?? " + fpath);
    }
  }
  //if( !( channel1_images.length == channel2_images.length && channel2_images.length == channel3_images.length )){
  if( channel1_images.length != channel2_images.length ){
    log_info("Error: The number mismatch. channel files");
    return 0;
  }

  //run("Colors...", "foreground=white background=black selection=green");
  //run("Clear Results");
  //run("Set Measurements...", "area mean standard min centroid center perimeter bounding fit shape feret's integrated median stack display redirect=None decimal=3");

  log_info("Starting analysis...");
  for(i=0; i < channel1_images.length; i++){
    channel1_image_dir = File.getParent(channel1_images[i]);
    channel2_image_dir = File.getParent(channel2_images[i]);
    if(channel1_image_dir == channel2_image_dir){
      log_info("channel1_image: " + File.getName(channel1_images[i]));
      log_info("channel2_image: " + File.getName(channel2_images[i]));
      merge_image(channel1_images[i], channel2_images[i], dst_dir);
      // ここにmaerge いれる
    } else {
      log_info("Files are in different directories.");
      log_info("channel1_image: " + channel1_images[i]);
      log_info("channel2_image: " + channel2_images[i]);
    }
  }
  // save log to log_file
  log_info("***************************** ANALYSIS END ***********************************************");
  log_info("Save log to " + log_file);
  log_info("******************************************************************************************");
  File.append(getInfo("log"), log_file);
  //File.saveString(getInfo("log"), log_file);

  close_all_images();

  setBatchMode(false);
}

function merge_image(ch1, ch2, dst_dir){
  ch1_id = open_image(ch1);
  ch1_title = getTitle();
  ch2_id = open_image(ch2);
  ch2_title = getTitle();
  //run("Merge Channels...", "c2=[H - 08(fld 1 wv FITC - FITC).TIF] c4=[H - 08(fld 1 wv Transillumination - Blank1).TIF] create");
  str = "c2=" + ch2_title + " c4=" + ch1_title + " create";
  //run("Merge Channels...", "c2=" + ch1_title + " c4=" + ch2_title + " create");
  run("Merge Channels...", str);
  out_fname = dst_dir + File.separator + replace(ch1_title, "_wv_.*$", ".tif");
  log_info(out_fname);
  saveAs("tiff", out_fname);
  close_all_images();
}


// rel: 割られる画像(path)
// ref: 割る画像(path)
function calc_rel(relpath, refpath, rel_ball, ref_ball, rec_ball, interval, max_int, min_threshold){
  log_info("Closing all images...");
  close_all_images();

  rel_id = open_image(relpath);
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rel_ball > 0){
    selectImage(rel_id);
    log_info("Target image subtract background with " + rel_ball);
    run("Subtract Background...", "rolling=" + rel_ball);
  }
  relmax_id = open_image(relpath); // 4095 領域を検索用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  ref_id = open_image(refpath);
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(ref_ball > 0){
    selectImage(ref_id);
    log_info("Reference image subtract background with " + ref_ball);
    run("Subtract Background...", "rolling=" + ref_ball);
  }
  refmax_id = open_image(refpath); // 4095 領域を検索用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  rec_id    = open_image(refpath); // 細胞領域検出用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rec_ball > 0){
    selectImage(rec_id);
    log_info("Reference image subtract background with " + rec_ball + " for defining cell region");
    run("Subtract Background...", "rolling=" + rec_ball);
  }
  // 画像のopenの順番(stack)は
  // 1. rel
  // 2. relmax(4095用)
  // 3. ref
  // 4. refmax(4095)用
  // 5. div
  slice_rel = 1;
  slice_relmax = 2;
  slice_ref = 3;
  slice_refmax = 4;
  slice_rec = 5;
  slice_div = 6;

  imageCalculator("Divide create 32-bit", rel_id, ref_id);
  div_id = getImageID();
  selectImage(div_id);
  //log_info("Info of Div image = " + getImageInfo());

  relname = File.getName(relpath);
  refname = File.getName(refpath);
  directory = File.getParent(relpath);
  calc_title = relname + "/" + refname;
  rename(calc_title);
  info_wait(interval);
  run("Images to Stack", "name=Stack title=[] use");
  info_wait(interval);
  selectWindow("Stack");
  stack_id = getImageID();


  // 割る側から4095の領域を除く.
  info_wait(interval);
  setSlice(slice_refmax); // 4095領域を探すstack
  info_wait(interval);
  setThreshold(max_int, max_int);
  run("Create Selection");
  info_wait(interval);
  if( selectionType() != -1 ){
    //setSlice(slice_ref); // referenceのスタック
    setSlice(slice_rec); // 細胞認識のスタック
    info_wait(interval);
    setForegroundColor(0);
    run("Fill", "slice");
  }
  run("Select None");
  resetThreshold();

  // 割られる側の4095の領域を計算対象から外す
  // ために、割られる側の4095の領域と同じ割る側の領域を
  // 0にする.
  // 割られる側の4095領域を探す画像.
  setSlice(slice_relmax);
  info_wait(interval);
  setThreshold(max_int, max_int);
  run("Create Selection");
  info_wait(interval);
  if( selectionType() != -1 ){
    info_wait(interval);
    //setSlice(slice_ref);
    setSlice(slice_rec); // 細胞認識のスタック
    setForegroundColor(0);
    info_wait(interval);
    run("Fill", "slice");
    info_wait(interval);
    setSlice(slice_rel);
  }
  run("Select None");
  resetThreshold();


  info_wait(interval);
  //setSlice(slice_ref_max);
  setSlice(slice_rec);
  // もし、ref_ball == 0 (background subtractionを行っていない
  // 場合) ここで、ball == 200 でバックグラウンドを引いた画像
  // を作り、それを元にthresholdをきる.
  //if( ref_ball == 0){
  //  log_info("Reference image subtract background for threshold.");
  //  run("Subtract Background...", "rolling=200 slice");
  //}
  log_info("Recognize objects.");
  setThreshold(min_threshold, max_int);
  info_wait(interval);
  log_info("Create selection.");
  run("Create Selection");
  // 本当はここで小さな領域を除く処理をしたほうが良いが
  // 小さな領域ならそもそも平均への影響はほぼ無いので無視する
  // ヒント: make binary でanalyze particle でサイズ指定すると
  // 小さな領域は除けるようなのでできないことは無いはず. 要検討.
  info_wait(interval);
  if( selectionType() == -1 ){
    log_info("No object found. skip. File: " + relname );
  } else {
    setSlice(slice_div);
    info_wait(interval);
    run("Measure");
    setResult("Directory", nResults - 1,  directory);
    setResult("target", nResults - 1, relname);
    setResult("reference", nResults - 1, refname);
    info_wait(interval);
    log_debug("The number of current images: " + nImages() );
    log_debug("current Image: " + getImageID() + getImageInfo() );
    log_debug("active?: " + isActive(getImageID()));
  }
  info_wait(interval);
  close_all_images();
}
