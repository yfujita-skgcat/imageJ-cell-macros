<%# encoding: utf-8 %>
<%= ERB.new(File.open("CommonFunction.txt", "r:UTF-8").read, nil, nil, "_erbout1").result(binding) %>

macro "Calculate each cell relative intensity..." {
  print("\\Clear");

  src_dir = getDirectory("Select input directory.");
  result_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".tsv";
  log_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".log";
  File.saveString(getInfo("log"), log_file);
  log_info("Calc_Each_Cell_Relative_intensity Ver 2.0.3");
  log_info("Authors:: Yoshihiko Fujita   (yoshihiko.fujita@cira.kyoto-u.ac.jp)");
  log_info("Copyright:: Copyright (C) 2016 Yoshihiko Fujita. All rights reserved.");
  log_info("License:: BSD licence");

  // ファイル変換後の形式のCheckboxGroup設定.
  items = newArray(4);
  items[0] = "jpeg";
  items[1] = "tiff";
  items[2] = "gif";
  items[3] = "png";

  // logging
  log_levels = newArray(5);
  log_levels[0] = "debug";
  log_levels[1] = "info";
  log_levels[2] = "warn";
  log_levels[3] = "error";
  log_levels[4] = "fatal";

  sat_int = newArray(2);
  sat_int[0] = "4095";
  sat_int[1] = "65535";

  nuc_thres_method = newArray(32);
  nuc_thres_method[0]  = "Huang";
  nuc_thres_method[1]  = "RenyiEntropy";
  nuc_thres_method[2]  = "100";
  nuc_thres_method[3]  = "150";
  nuc_thres_method[4]  = "200";
  nuc_thres_method[5]  = "250";
  nuc_thres_method[6]  = "300";
  nuc_thres_method[7]  = "350";
  nuc_thres_method[8]  = "400";
  nuc_thres_method[9]  = "450";
  nuc_thres_method[10] = "500";
  nuc_thres_method[11] = "600";
  nuc_thres_method[12] = "700";
  nuc_thres_method[13] = "800";
  nuc_thres_method[14] = "900";
  nuc_thres_method[15] = "1000";
  nuc_thres_method[16] = "1100";
  nuc_thres_method[17] = "1200";
  nuc_thres_method[18] = "1300";
  nuc_thres_method[19] = "1400";
  nuc_thres_method[20] = "1500";
  nuc_thres_method[21] = "1600";
  nuc_thres_method[22] = "1700";
  nuc_thres_method[23] = "2000";
  nuc_thres_method[24] = "3000";
  nuc_thres_method[25] = "4000";
  nuc_thres_method[26] = "5000";
  nuc_thres_method[27] = "6000";
  nuc_thres_method[28] = "7000";
  nuc_thres_method[29] = "8000";
  nuc_thres_method[30] = "9000";
  nuc_thres_method[31] = "10000";

  // default value
  def_nuc_thres  = "Huang";
  def_max_int    = "4095";
  def_rel_filter = ".*TexasRed.*$";
  def_rel_ball   = 0;
  def_ref_filter = ".*DAPI.*$";
  def_ref_ball   = 200;
  def_watershed  = 0.5;
  def_subdir     = false; // false
  def_batch      = false; // false
  def_interval   = 1;

  config = load_config("CalcCellArea");
  default = newArray("0", "0", "1", "2", "info", "Huang", "700-10000", "0.5-1.00", ".*DAPI.*$", "0", ".*FITC.*$", "0", "200", "2", "4095", "-2", "-1", "");
  if(config.length != default.length){
    config = default;
  }


  Dialog.create("Settings.");
  Dialog.addMessage("Macros can be stopped by ESC");
  Dialog.addCheckbox("Calculate all files in subdirectories?", config[0]);
  Dialog.addCheckbox("Batch mode", config[1]);
  Dialog.addCheckbox("Save region-marked PING images.", config[2]);
  Dialog.addNumber("Interval each step (sec, ignore if bachmode)", config[3]);
  Dialog.addChoice("log level",  log_levels, config[4]);
  Dialog.addChoice("Threshold method", nuc_thres_method, config[5]);
  Dialog.addString("Size (i.e. 0-infinity)", config[6]);
  /* Dialog.addString("Circularity of nuclei (i.e. 0.20-1.00)", config[7]); */
  Dialog.addString("Target filter image (regular expression):", config[7]);
  Dialog.addNumber("Subtract background for Target (ball radius, 0 is OFF, default 0):", config[8]);
  /* Dialog.addString("Reference filter image (regular expression):", config[10]); */
  /* Dialog.addNumber("Subtract background for Reference (ball radius, 0 is OFF, default 0):", config[11]); */
  /* Dialog.addNumber("Subtract background for Recognition of cell region (ball radius, 0 is OFF, default 200):", config[12]); */
  if(File.exists(getDirectory("plugins") + File.separator + "Adjustable_Watershed.class")){
    Dialog.addNumber("Watershed value (Adjustable_Watershed.class exists: default 0.5):", config[9]);
  } else {
    Dialog.addNumber("Watershed value (NOTFOUND: Adjustable_Watershed.class in plugins folder):", config[9]);
  }
  Dialog.addChoice("Saturated intensity:",  sat_int, config[10]);
  Dialog.addString("Exclude file (regular expression, blank = disable):", config[11]);

  Dialog.show();

  config[0]  = Dialog.getCheckbox(); // subdir
  config[1]  = Dialog.getCheckbox(); // batch
  config[2]  = Dialog.getCheckbox(); // save or not PING images
  config[3]  = Dialog.getNumber(); // interval
  config[4]  = Dialog.getChoice(); // log level
  config[5]  = Dialog.getChoice(); // nuclear threshold method
  config[6]  = Dialog.getString(); // nuclear size
  /* config[7]  = Dialog.getString(); // nuclear circularity */
  config[7]  = Dialog.getString(); // target filter
  config[8]  = Dialog.getNumber(); // target ball
  /* config[10]  = Dialog.getString(); // ref filter */
  /* config[11]  = Dialog.getNumber(); // ref ball */
  /* config[12]  = Dialog.getNumber(); // recog cell ball */
  config[9]  = Dialog.getNumber(); // watershed value
  config[10] = Dialog.getChoice(); // Sat int
  config[11] = Dialog.getString(); // Exclude file

  save_config("CalcCellArea", config);

  recursive     = config[0];
  batchmode     = config[1];
  save_ping     = config[2];
  interval      = config[3];
  log_level_str = config[4];
  thres_method  = config[5];
  nuc_size      = config[6];
  /* nuc_circ      = config[7]; */
  rel_filter    = config[7];
  rel_ball      = config[8];
  /* ref_filter    = config[10]; */
  /* ref_ball      = config[11]; */
  /* rec_ball      = config[12]; */
  if(File.exists(getDirectory("plugins") + File.separator + "Adjustable_Watershed.class")){
    watershed   = config[9];
  } else {
    watershed   = -1;
  }
  max_int       = config[10];
  exclude       = config[11];
  /* distance      = config[15]; */
  /* thickness     = config[16]; */

  if(batchmode){
    log_info("batchmode = TRUE");
  } else {
    log_info("batchmode = FALSE");
  }

  if(log_level_str == "debug") {
    log_level = 1;
  } else if(log_level_str == "info") {
    log_level = 2;
  } else if(log_level_str == "warn") {
    log_level = 3;
  } else if(log_level_str == "error") {
    log_level = 4;
  } else if(log_level_str == "fatal") {
    log_level = 5;
  } else {
    log_fatal("log level not found. Enter unexpectd code.");
    return 0;
  }

  log_info("max_int = " + max_int);
  log_info("log level = " + log_level);


  file_list = find_recursive_dir(src_dir, recursive);

  if(file_list.length < 1){
    log_info("File not found.");
    return 0;
  }


  setBatchMode(batchmode);
  if(batchmode){
    interval = 0;
  }

  // image separation
  rel_images = newArray(0);
  for(i=0; i < file_list.length; i++){
    fpath = file_list[i];
    fname = File.getName(fpath);
    if(matches(fname, exclude)){
      log_info("Exclude file: " + fpath);
    } else if(matches(fname, rel_filter)){
      rel_images = Array.concat(rel_images, fpath);
    } else {
      log_info("?? " + fpath);
    }
  }

  run("Colors...", "foreground=white background=black selection=green");
  run("Clear Results");
  run("Set Measurements...", "area mean standard min centroid center perimeter bounding fit shape feret's integrated median stack display redirect=None decimal=3");
  for(i=0; i < rel_images.length; i++){
    rel_image_dir = File.getParent(rel_images[i]);
    log_info("rel_image: " + File.getName(rel_images[i]));
    calc_rel(rel_images[i], rel_ball, interval, max_int, watershed, thres_method, nuc_size, save_ping);
    if( i == 0){
      log_info("Writing to " + result_file);
      saveAs("Results", result_file);
      run("Clear Results");
    } else {

      log_info("Add results to " + result_file);
      File.append(get_result_string(), result_file);
      run("Clear Results");

      current_memory = parseInt(IJ.currentMemory())/1024/1024; // mega bytes
      max_memory = parseInt(IJ.maxMemory())/1024/1024;
      log_info("Memory usage: " + current_memory + " M bytes / max: " + max_memory + " M bytes");
      if( (((i+1) % 10) == 0 ) || current_memory > (max_memory - 100) ){ // 400 MByte 以上でlogを書き込んでclear
        File.append(getInfo("log"), log_file);
        print("\\Clear");
      }
    }
  }


  // save log to log_file
  log_info("***************************** ANALYSIS END ***********************************************");
  log_info("Save log to " + log_file);
  log_info("Analysis finished. Please see result file: " + result_file);
  log_info("******************************************************************************************");
  File.append(getInfo("log"), log_file);
  //File.saveString(getInfo("log"), log_file);

  close_all_images();

  setBatchMode(false);
}


// rel: 割られる画像(path)
// ref: 割る画像(path)
function calc_rel(relpath, rel_ball, interval, max_int, watershed, thres_method, nuc_size, save_ping){
  log_info("Closing all images...");
  close_all_images();
  roiManager("reset");

  log_info("Opening images: " + relpath);
  rel_id = open_image(relpath);
  if(isOpen(rel_id) != true ){
    log_info("Fail to open " + relpath + ". Skipped.");
    return;
  } else {
    log_info("Opened: " + relpath);
  }
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rel_ball > 0){
    selectImage(rel_id);
    log_info("Target image \"" + getTitle() + "\" subtract background with " + rel_ball);
    run("Subtract Background...", "rolling=" + rel_ball);
  }

  
  // 画像のopenの順番(stack)は
  // 1. rel (background substraction)
  slice_rel = 1;
  directory = File.getParent(relpath);
  relname = File.getName(relpath);

  setOption("BlackBackground", false);
  if( matches(thres_method, "^[0-9]+$") ){
    setThreshold(parseInt(thres_method), max_int);
  } else {
    setAutoThreshold(thres_method + " dark");
  }

  run("Create Selection");
  if( selectionType() == -1 ){
    log_info("No nuclei found. skip. File: " + relname );
    return 0;
  }
  info_wait(interval);

  //roiManager("Add");
  //roiManager("select", 0);
  //roiManager("Rename", "Cell");
  /* roiManager("Deselect");         */
  /* run("Select None");             */

  selectImage(rel_id);
  run("Measure");
  
  selectImage(rel_id);
  resetThreshold();

  if(save_ping){
    // save region-merged image (png)
    title = getTitle();
    log_info("Set to the Tiff image for a marked PING image:" + title);
    //roiManager("Show all with labels");
    //setOption("Show All", true);
    //run("Labels...", "color=white font=12 show draw bold");
    run("Flatten");
    tmp_id = getImageID();
    info_wait(interval);

    // 出力先ファイル名
    dst_path = directory + File.separator + replace(title, "\\.(tif|TIF|tiff|TIFF)$",  "_each.png");
    log_info("output to " + dst_path);
    if(interval == 0 && ! is("Batch Mode") ){
      info_wait(1);
    } else {
      info_wait(interval);
    }
    saveAs("PNG", dst_path);
    close_image(tmp_id);
  }

  info_wait(interval);
  log_info("closing all images...");
  close_all_images();
}
