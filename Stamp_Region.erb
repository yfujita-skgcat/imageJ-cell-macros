<%# encoding: utf-8 %>
<%= ERB.new(File.open("CommonFunction.txt", "r:UTF-8").read, nil, nil, "_erbout1").result(binding) %>

macro "Calculate each cell relative intensity..." {
  print("\\Clear");

  src_dir = getDirectory("Select input directory.");
  result_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".tsv";
  log_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".log";
  File.saveString(getInfo("log"), log_file);
  log_info("Stamp Region Ver 0.0.1");
  log_info("Authors:: Yoshihiko Fujita   (yoshihiko.fujita@cira.kyoto-u.ac.jp)");
  log_info("Copyright:: Copyright (C) 2016 Yoshihiko Fujita. All rights reserved.");
  log_info("License:: BSD licence");

  // ファイル変換後の形式のCheckboxGroup設定.
  items = newArray(4);
  items[0] = "jpeg";
  items[1] = "tiff";
  items[2] = "gif";
  items[3] = "png";

  // logging
  log_levels = newArray(5);
  log_levels[0] = "debug";
  log_levels[1] = "info";
  log_levels[2] = "warn";
  log_levels[3] = "error";
  log_levels[4] = "fatal";

  sat_int = newArray(2);
  sat_int[0] = "4095";
  sat_int[1] = "65535";

  nuc_thres_method = newArray(23);
  nuc_thres_method[0]  = "Huang";
  nuc_thres_method[1]  = "RenyiEntropy";
  nuc_thres_method[2]  = "100";
  nuc_thres_method[3]  = "150";
  nuc_thres_method[4]  = "200";
  nuc_thres_method[5]  = "250";
  nuc_thres_method[6]  = "300";
  nuc_thres_method[7]  = "350";
  nuc_thres_method[8]  = "400";
  nuc_thres_method[9]  = "450";
  nuc_thres_method[10] = "500";
  nuc_thres_method[11] = "600";
  nuc_thres_method[12] = "700";
  nuc_thres_method[13] = "800";
  nuc_thres_method[14] = "900";
  nuc_thres_method[15] = "1000";
  nuc_thres_method[16] = "1100";
  nuc_thres_method[17] = "1200";
  nuc_thres_method[18] = "1300";
  nuc_thres_method[19] = "1400";
  nuc_thres_method[20] = "1500";
  nuc_thres_method[21] = "1600";
  nuc_thres_method[22] = "1700";

  // default value
  def_nuc_thres  = "Huang";
  def_max_int    = "4095";
  def_rel_filter = ".*TexasRed.*$";
  def_ref_filter = ".*DAPI.*$";
  def_ref_ball   = 200;
  def_subdir     = false; // false
  def_batch      = false; // false
  def_interval   = 1;

  config = load_config("StampRegion");
  default = newArray("0", "0", "0", "2", "info", "Huang", ".*FITC.*", ".*DAPI.*$", "0", "", "0.35");
  if(config.length != default.length){
    config = default;
  }


  Dialog.create("Settings.");
  Dialog.addMessage("Macros can be stopped by ESC");
  Dialog.addCheckbox("Calculate all files in subdirectories?",                                                 config[0]);
  Dialog.addCheckbox("Batch mode",                                                                             config[1]);
  Dialog.addCheckbox("Save region-marked PING images.",                                                        config[2]);
  Dialog.addNumber("Interval each step (sec, ignore if bachmode)",                                             config[3]);
  Dialog.addChoice("log level",  log_levels,                                                                   config[4]);
  Dialog.addChoice("Nucleus threshold method", nuc_thres_method,                                               config[5]);
  Dialog.addString("Target filter image (regular expression):",                                                config[6]);
  Dialog.addString("Reference filter image (regular expression):",                                             config[7]);
  Dialog.addNumber("Subtract background for Recognition of cell region (ball radius, 0 is OFF, default 200):", config[8]);
  Dialog.addString("Exclude file (regular expression, blank = disable):",                                      config[9]);
  Dialog.addNumber("Ajust saturated:",                                                                         config[10]);

  Dialog.show();

  config[0]  = Dialog.getCheckbox(); // subdir
  config[1]  = Dialog.getCheckbox(); // batch
  config[2]  = Dialog.getCheckbox(); // save or not PING images
  config[3]  = Dialog.getNumber(); // interval
  config[4]  = Dialog.getChoice(); // log level
  config[5]  = Dialog.getChoice(); // nuclear threshold method
  config[6]  = Dialog.getString(); // target filter
  config[7]  = Dialog.getString(); // ref filter
  config[8]  = Dialog.getNumber(); // recog cell ball
  config[9]  = Dialog.getString(); // Exclude file
  config[10] = Dialog.getNumber(); // Adjust saturated

  save_config("StampRegion", config);

  recursive     = config[0];
  batchmode     = config[1];
  save_ping     = config[2];
  interval      = config[3];
  log_level_str = config[4];
  thres_method  = config[5];
  rel_filter    = config[6];
  ref_filter    = config[7];
  rec_ball      = config[8];
  exclude       = config[9];
  adjust_saturated = config[10];

  if(batchmode){
    log_info("batchmode = TRUE");
  } else {
    log_info("batchmode = FALSE");
  }

  if(log_level_str == "debug") {
    log_level = 1;
  } else if(log_level_str == "info") {
    log_level = 2;
  } else if(log_level_str == "warn") {
    log_level = 3;
  } else if(log_level_str == "error") {
    log_level = 4;
  } else if(log_level_str == "fatal") {
    log_level = 5;
  } else {
    log_fatal("log level not found. Enter unexpectd code.");
    return 0;
  }

  log_info("log level = " + log_level);


  file_list = find_recursive_dir(src_dir, recursive);

  if(file_list.length < 1){
    log_info("File not found.");
    return 0;
  }


  setBatchMode(batchmode);
  if(batchmode){
    interval = 0;
  }

  // image separation
  rel_images = newArray(0);
  ref_images = newArray(0);
  for(i=0; i < file_list.length; i++){
    fpath = file_list[i];
    fname = File.getName(fpath);
    if(matches(fname, exclude)){
      log_info("Exclude file: " + fpath);
    } else if(matches(fname, rel_filter)){
      rel_images = Array.concat(rel_images, fpath);
    } else if(matches(fname, ref_filter)){
      ref_images = Array.concat(ref_images, fpath);
    } else {
      log_info("?? " + fpath);
    }
  }
  if(rel_images.length != ref_images.length){
    log_info("Error: The number mismatch. target files = " + rel_images.length + ", reference files = " + ref_images.length);
    return 0;
  }

  run("Colors...", "foreground=white background=black selection=green");
  run("Clear Results");
  run("Set Measurements...", "area mean standard min centroid center perimeter bounding fit shape feret's integrated median stack display redirect=None decimal=3");
  for(i=0; i < rel_images.length; i++){
    rel_image_dir = File.getParent(rel_images[i]);
    ref_image_dir = File.getParent(ref_images[i]);
    if(rel_image_dir == ref_image_dir){
      log_info("rel_image: " + File.getName(rel_images[i]));
      log_info("ref_image: " + File.getName(ref_images[i]));
      calc_rel(rel_images[i], ref_images[i], rec_ball, interval, thres_method, adjust_saturated, save_ping);
    } else {
      log_info("Files are in different directories.");
      log_info("rel_image: " + rel_images[i]);
      log_info("ref_image: " + ref_images[i]);
    }

    current_memory = parseInt(IJ.currentMemory())/1024/1024; // mega bytes
    max_memory = parseInt(IJ.maxMemory())/1024/1024;
    log_info("Memory usage: " + current_memory + " M bytes / max: " + max_memory + " M bytes");
    if( (((i+1) % 10) == 0 ) || current_memory > (max_memory - 100) ){ // 400 MByte 以上でlogを書き込んでclear
      File.append(getInfo("log"), log_file);
      print("\\Clear");
    }
  }


  // save log to log_file
  log_info("***************************** ANALYSIS END ***********************************************");
  log_info("Save log to " + log_file);
  log_info("Analysis finished. Please see result file: " + result_file);
  log_info("******************************************************************************************");
  File.append(getInfo("log"), log_file);
  //File.saveString(getInfo("log"), log_file);

  close_all_images();

  setBatchMode(false);
}


// rel: 割られる画像(path)
// ref: 割る画像(path)
function calc_rel(relpath, refpath, rec_ball, interval, thres_method, adjust_saturated, save_ping){
  log_info("Closing all images...");
  close_all_images();
  roiManager("reset");

  rel_id = open_image(relpath);
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  rec_id    = open_image(refpath); // 細胞領域検出用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rec_ball > 0){
    selectImage(rec_id);
    log_info("Subtracting the background of the recognition-image \"" + getTitle() + "\" with " + rec_ball + " for defining cell region");
    run("Subtract Background...", "rolling=" + rec_ball);
  }

  
  // 画像のopenの順番(stack)は
  // 1. rel (background substraction)
  // 3. ref (background substraction)
  // 5. rec (領域認識用)
  // 6. divided of (rel/ref)
  // 7. binary image of rec
  slice_rel = 1;
  slice_ref = 3;
  slice_rec = 5;
  slice_div = 6;
  slice_bin = 7;


  relname = File.getName(relpath);
  refname = File.getName(refpath);
  directory = File.getParent(relpath);
  relname = remove_special_chars(relname);

  // 細胞の領域を認識
  selectImage(rec_id);
  filter_name_for_marking = get_filter_name();
  log_info("filter_name = " + filter_name_for_marking);

  setOption("BlackBackground", false);
  if( matches(thres_method, "^[0-9]+$") ){
    setThreshold(parseInt(thres_method), get_max_int());
  } else {
    setAutoThreshold(thres_method + " dark");
  }

  run("Create Selection");
  if( selectionType() != -1 ){
    roiManager("Add");
    roiManager("select", 0);
    roiManager("Rename", "RecogRegion");
    info_wait(interval);
  }
  resetThreshold();
  // 選択範囲の長さが長すぎるときはちゃんと選択できていないということでスキップする.
  //perim
  // miss    1820123
  // normal    37434
  perim = get_perimeter();
  run("Clear Results");
  log_info("perimeter = " + perim);
  if( perim > 800000 ){
  log_info("logger perimeter > 800000. skip.");
    continue;
  }

  // 解析対象の画像
  selectImage(rel_id);
  if(adjust_saturated > 0){
    log_info("Enhance Contrast saturated="+adjust_saturated);
    run("Enhance Contrast", "saturated="+adjust_saturated);
  }
  log_info("Set to image " + getTitle());
  new_title = replace(getTitle(), "\\.(tif|TIF|tiff|TIFF)$", "_marked_" + filter_name_for_marking + ".png");
  log_info("new fname = " + new_title);
  setOption("Show All", true);
  info_wait(interval);
  run("Flatten");
  dst_path = directory + File.separator + new_title;
  log_info("output to " + dst_path);
  info_wait(interval);

  if(save_ping){
    // save region-merged image (png)
    saveAs("PNG", dst_path);
  }
  //1	A_4_fld_4_wv_FITC_FITC.TIF:RecogRegion	1092530	874.044	1099.340	450	57320	962.014	711.881	886.242	669.960	1820123.683	0	0	1920	1440	1378.975	1008.758	176.653	4.144E-6	2399.392	954919492	634	954919492	1	0	0	0	1440.000	1.367	0.732	NaN

  info_wait(interval);
  log_info("closing all images...");
  close_all_images();
}
