<%# encoding: utf-8 %>
<%= ERB.new(File.open("CommonFunction.txt", "r:UTF-8").read, nil, nil, "_erbout1").result(binding) %>

macro "Calculate relative intensity..." {
  log_info("HeatMapImage ver 3.1");
  src_dir = getDirectory("Select input directory.");

  // logging
  log_levels = newArray(5);
  log_levels[0] = "debug";
  log_levels[1] = "info";
  log_levels[2] = "warn";
  log_levels[3] = "error";
  log_levels[4] = "fatal";

  // max intensity
  sat_int = newArray(3);
  sat_int[0] = "255";
  sat_int[1] = "4095";
  sat_int[2] = "65534";

  config = load_config("HeatMapImage");
  //config = newArray(0);
  default = newArray("0", "0", "5", "info", ".*BFP.*$", "0", ".*GFP.*$", "0", "200", "120", "0.5", "2.7", "4095");
  if(config.length != default.length){
    config = default;
  }

  Dialog.create("Settings.");
  Dialog.addMessage("Macros can be stopped by ESC");

  Dialog.addCheckbox("Calculate all files in subdirectories?", config[0]);
  Dialog.addCheckbox("Batch mode", config[1]);
  Dialog.addNumber("Interval each step (sec, ignore if bachmode)", config[2]);
  Dialog.addChoice("log level",  log_levels, config[3]);
  Dialog.addString("Target filter image (regular exprssion):", config[4]);
  Dialog.addNumber("Subtract background for Target (ball radius, 0 is OFF, default 0):", config[5]);
  Dialog.addString("Reference filter image (regular expression):", config[6]);
  Dialog.addNumber("Subtract background for Reference (ball radius, 0 is OFF, default 0):", config[7]);
  Dialog.addNumber("Subtract background for Recognition of cell region (ball radius, 0 is OFF, default 200):", config[8]);
  Dialog.addNumber("Minimum value threshold:", config[9]);
  Dialog.addNumber("Coldest relative value for heatmap:", config[10]);
  Dialog.addNumber("Hottest relative value for heatmap:", config[11]);
  Dialog.addChoice("Saturated intensity:",  sat_int, config[12]);

  Dialog.show();

  config[0]  = Dialog.getCheckbox(); // subdir
  config[1]  = Dialog.getCheckbox(); // batch
  config[2]  = Dialog.getNumber(); // interval
  config[3]  = Dialog.getChoice(); // log level
  config[4]  = Dialog.getString(); // target filter
  config[5]  = Dialog.getNumber(); // target ball
  config[6]  = Dialog.getString(); // ref filter
  config[7]  = Dialog.getNumber(); // ref ball
  config[8]  = Dialog.getNumber(); // recog cell ball
  config[9]  = Dialog.getNumber(); // Min-threshold
  config[10]  = Dialog.getNumber(); // Coldest
  config[11] = Dialog.getNumber(); // Hottest
  config[12] = Dialog.getChoice(); // Sat int

  save_config("HeatMapImage", config);

  recursive     = config[0];
  batchmode     = config[1];
  interval      = config[2];
  log_level_str = config[3];
  rel_filter    = config[4];
  rel_ball      = config[5];
  ref_filter    = config[6];
  ref_ball      = config[7];
  rec_ball      = config[8];
  min_threshold = config[9];
  cold          = config[10];
  hot           = config[11];
  //max_int       = parseInt(config[11]);
  max_int       = config[12];

  if(batchmode){
    log_info("batchmode = TRUE");
  } else {
    log_info("batchmode = FALSE");
  }
  if(log_level_str == "debug") {
    log_level = 1;
  } else if(log_level_str == "info") {
    log_level = 2;
  } else if(log_level_str == "warn") {
    log_level = 3;
  } else if(log_level_str == "error") {
    log_level = 4;
  } else if(log_level_str == "fatal") {
    log_level = 5;
  } else {
    log_fatal("log level not found. Enter unexpectd code.");
    return 0;
  }

  log_info("min_threshold = " + min_threshold);
  log_info("max_int = " + max_int);
  log_info("log level = " + log_level);

  file_list = find_recursive_dir(src_dir, recursive);

  if(file_list.length < 1){
    log_info("File not found.");
    return 0;
  }


  setBatchMode(batchmode);
  if(batchmode){
    interval = 0;
  }

  // image separation
  rel_images = newArray(0);
  ref_images = newArray(0);
  for(i=0; i < file_list.length; i++){
    fpath = file_list[i];
    fname = File.getName(fpath);
    if(matches(fname, rel_filter)){
      rel_images = Array.concat(rel_images, fpath);
    } else if(matches(fname, ref_filter)){
      ref_images = Array.concat(ref_images, fpath);
    } else {
      log_info("?? " + fpath);
    }
  }
  if(rel_images.length != ref_images.length){
    log_info("Error: The number mismatch. target files = " + rel_images.length + ", reference files = " + ref_images.length);
    return 0;
  }

  for(i=0; i < rel_images.length; i++){
    rel_image_dir = File.getParent(rel_images[i]);
    ref_image_dir = File.getParent(ref_images[i]);
    if(rel_image_dir == ref_image_dir){
      log_info("rel_image: " + File.getName(rel_images[i]));
      log_info("ref_image: " + File.getName(ref_images[i]));
      calc_rel(rel_images[i], ref_images[i], rel_ball, ref_ball, rec_ball, interval, max_int, min_threshold, cold, hot);
    } else {
      log_info("Files are in different directories.");
      log_info("rel_image: " + rel_images[i]);
      log_info("ref_image: " + ref_images[i]);
    }
  }

  setBatchMode(false);
}

function is_max_exist(int_max){
  area = 0;
  mean = 0;
  min  = 0;
  max  = 0;
  std  = 0;
  histogram = 0;
  getStatistics(area, mean, min, max, std, histogram);
  log_info("max = " + max);
  log_info("int_max = " + int_max);
  if(max != max_int){
    return 0;
  }
  return 1;
}
function is_higher_exist(high){
  area = 0;
  mean = 0;
  min  = 0;
  max  = 0;
  std  = 0;
  histogram = 0;
  getStatistics(area, mean, min, max, std, histogram);
  if(max < high){
    return 0;
  }
  return 1;
}

// rel: 割られる画像(path)
// ref: 割る画像(path)
function calc_rel(relpath, refpath, rel_ball, ref_ball, rec_ball, interval, max_int, min_threshold, cold, hot){
  log_info("Closing all images...");
  close_all_images();
  rel_id = open_image(relpath);
  if(rel_ball > 0){
    selectImage(rel_id);
    log_info("Target image subtract background with " + rel_ball);
    run("Subtract Background...", "rolling=" + rel_ball);
  }
  relmax_id = open_image(relpath); // 4095 領域を検索用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  ref_id = open_image(refpath);
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(ref_ball > 0){
    selectImage(ref_id);
    log_info("Reference image subtract background with " + ref_ball);
    run("Subtract Background...", "rolling=" + ref_ball);
  }
  refmax_id = open_image(refpath); // 4095 領域を検索用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  rec_id    = open_image(refpath); // 細胞領域検出用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rec_ball > 0){
    selectImage(rec_id);
    log_info("Reference image subtract background with " + rec_ball + " for defining cell region");
    run("Subtract Background...", "rolling=" + rec_ball);
  }

  // 画像のopenの順番(stack)は
  // 1. rel
  // 2. relmax(4095用)
  // 3. ref
  // 4. refmax(4095)用
  // 5. div
  slice_rel = 1;
  slice_relmax = 2;
  slice_ref = 3;
  slice_refmax = 4;
  slice_rec = 5;
  slice_div = 6;
  slice_heat_map = 7;

  imageCalculator("Divide create 32-bit", rel_id, ref_id);
  div_id = getImageID();
  selectImage(div_id);
  //log_info("Info of Div image = " + getImageInfo());

  relname = File.getName(relpath);
  refname = File.getName(refpath);
  directory = File.getParent(relpath);

  // 出力先ファイル名
  dst_path = directory + "/" + replace(refname, "\\.(tif|TIF|tiff|TIFF)$", "_heatmap.png");

  //calc_title = relname + "/" + refname;
  //rename(calc_title);
  //info_wait(interval);
  run("Images to Stack", "name=Stack title=[] use");
  //info_wait(interval);
  selectWindow("Stack");
  stack_id = getImageID();


  // 割る側から4095の領域を除く.
  //info_wait(interval);
  setSlice(slice_refmax); // 4095領域を探すstack
  //info_wait(interval);
  if(is_max_exist(max_int) == 1){
    setThreshold(max_int, max_int);
    run("Create Selection");
  }
  if( selectionType() != -1 ){
    //setSlice(slice_ref); // referenceのスタック
    setSlice(slice_rec); // 細胞認識のスタック
    //info_wait(interval);
    setForegroundColor(0);
    run("Fill", "slice");
  }
  run("Select None");
  resetThreshold();

  // 割られる側の4095の領域を計算対象から外す
  // ために、割られる側の4095の領域と同じ割る側の領域を
  // 0にする.
  // 割られる側の4095領域を探す画像.
  setSlice(slice_relmax);
  //info_wait(interval);
  if(is_max_exist(max_int) == 1){
    setThreshold(max_int, max_int);
    run("Create Selection");
  }
  if( selectionType() != -1 ){
    //info_wait(interval);
    //setSlice(slice_ref);
    setSlice(slice_rec); // 細胞認識のスタック
    setForegroundColor(0);
    //info_wait(interval);
    run("Fill", "slice");
    //info_wait(interval);
    setSlice(slice_rel);
  }
  run("Select None");
  resetThreshold();


  //info_wait(interval);
  //setSlice(slice_ref);
  setSlice(slice_rec);
  // もし、ref_ball == 0 (background subtractionを行っていない
  // 場合) ここで、ball == 200 でバックグラウンドを引いた画像
  // を作り、それを元にthresholdをきる.
  //if( ref_ball == 0){
  //  log_info("Reference image subtract background for threshold.");
  //  run("Subtract Background...", "rolling=200 slice");
  //}
  ////setAutoThreshold("MinError dark");
  //setAutoThreshold("Percentile dark");
  log_info("Recognize objects.");
  if( is_higher_exist(min_threshold) ){
    setThreshold(min_threshold, max_int);
    log_info("Create selection.");
    run("Create Selection");
  }
  //info_wait(interval);
  // 本当はここで小さな領域を除く処理をしたほうが良いが
  // 小さな領域ならそもそも平均への影響はほぼ無いので無視する
  // ヒント: make binary でanalyze particle でサイズ指定すると
  // 小さな領域は除けるようなのでできないことは無いはず. 要検討.
  //info_wait(interval);
  setSlice(slice_div);

  area = 0;
  mean = 0;
  min = 0;
  max = 0;
  getStatistics(area, mean, min, max);
  log_info("area = " + area);
  log_info("mean = " + mean);
  log_info("min = " + min);
  log_info("max = " + max);

  //waitForUser("Check relative intensity before conversion. v = (v - " + cold + ")/(" + hot + " - " + cold + ") * " + max_int);
  info_wait(interval);
  // セレクション領域の値を最小値を0に最大値を255(max_int)に合わせて計算する
  log_info("code=[v=(v - " + cold + ")/(" + hot + " - " + cold + ") * " + 255 + "] slice");
  run("Macro...", "code=[v=(v - " + cold + ")/(" + hot + " - " + cold + ") * " + 255 + "] slice");

  // 8 bitにする.
  run("Conversions...", " ");
  run("8-bit");
  run("Conversions...", "scale");

  info_wait(interval);

  if( selectionType() == -1 ){
    log_warn("No selected regions");
  } else {
    run("Make Inverse");
    info_wait(interval);
    setColor(0);
    fill();
    info_wait(interval);
    run("Select None");
    run("Thermal");
    log_info("output to " + dst_path);
    if(interval == 0 && ! is("Batch Mode") ){
      info_wait(1);
    } else {
      info_wait(interval);
    }
    saveAs("PNG", dst_path);
    info_wait(interval);
  }

  close_all_images();
}
