<%# encoding: utf-8 %>
<%= ERB.new(File.open("CommonFunction.txt", "r:UTF-8").read, nil, nil, "_erbout1").result(binding) %>

macro "Calculate relative intensity..." {
  print("\\Clear");

  src_dir = getDirectory("Select input directory.");
  result_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".tsv";
  log_file = replace(src_dir, "\\" + File.separator + "*$", "") + ".log";
  File.saveString(getInfo("log"), log_file);
  log_info("Calc_Each_Cell_Relative_intensity Ver 4.0.0");
  log_info("Authors:: Yoshihiko Fujita   (yoshihiko.fujita@cira.kyoto-u.ac.jp)");
  log_info("Copyright:: Copyright (C) 2016 Yoshihiko Fujita. All rights reserved.");
  log_info("License:: BSD licence");

  // ファイル変換後の形式のCheckboxGroup設定.
  items = newArray(4);
  items[0] = "jpeg";
  items[1] = "tiff";
  items[2] = "gif";
  items[3] = "png";

  // logging
  log_levels = newArray(5);
  log_levels[0] = "debug";
  log_levels[1] = "info";
  log_levels[2] = "warn";
  log_levels[3] = "error";
  log_levels[4] = "fatal";

  sat_int = newArray(2);
  sat_int[0] = "4095";
  sat_int[1] = "65534";

  // default value
  def_max_int = "4095";
  def_rel_filter = ".*TexasRed.*$";
  def_rel_ball   = 0;
  def_ref_filter = ".*DAPI.*$";
  def_ref_ball   = 200;
  def_min_thres  = 120;
  def_subdir     = false; // false
  def_batch      = false; // false
  def_interval   = 1;

  config = load_config("CalcRelativeIntensity");
  default = newArray("0", "0", "5", "info", ".*BFP.*$", "0", ".*GFP.*$", "0", "200", "120", "4095");
  if(config.length != default.length){
    config = default;
  }

  Dialog.create("Settings.");
  Dialog.addMessage("Macros can be stopped by ESC");
  Dialog.addCheckbox("Calculate all files in subdirectories?", config[0]);
  Dialog.addCheckbox("Batch mode", config[1]);
  Dialog.addNumber("Interval each step (sec, ignore if bachmode)", config[2]);
  Dialog.addChoice("log level",  log_levels, config[3]);
  Dialog.addString("Target filter image (regular expression):", config[4]);
  Dialog.addNumber("Subtract background for Target (ball radius, 0 is OFF, default 0):", config[5]);
  Dialog.addString("Reference filter image (regular expression):", config[6]);
  Dialog.addNumber("Subtract background for Reference (ball radius, 0 is OFF, default 0):", config[7]);
  Dialog.addNumber("Subtract background for Recognition of cell region (ball radius, 0 is OFF, default 200):", config[8]);
  Dialog.addNumber("Minimum value threshold (default 120):", config[9]);
  Dialog.addChoice("Saturated intensity:",  sat_int, config[10]);

  Dialog.show();

  config[0]  = Dialog.getCheckbox(); // subdir
  config[1]  = Dialog.getCheckbox(); // batch
  config[2]  = Dialog.getNumber(); // interval
  config[3]  = Dialog.getChoice(); // log level
  config[4]  = Dialog.getString(); // target filter
  config[5]  = Dialog.getNumber(); // target ball
  config[6]  = Dialog.getString(); // ref filter
  config[7]  = Dialog.getNumber(); // ref ball
  config[8]  = Dialog.getNumber(); // recog cell ball
  config[9]  = Dialog.getNumber(); // Min-threshold
  config[10] = Dialog.getChoice(); // Sat int

  save_config("CalcRelativeIntensity", config);

  recursive     = config[0];
  batchmode     = config[1];
  interval      = config[2];
  log_level_str = config[3];
  rel_filter    = config[4];
  rel_ball      = config[5];
  ref_filter    = config[6];
  ref_ball      = config[7];
  rec_ball      = config[8];
  min_threshold = config[9];
  max_int       = config[10];

  if(batchmode){
    log_info("batchmode = TRUE");
  } else {
    log_info("batchmode = FALSE");
  }

  if(log_level_str == "debug") {
    log_level = 1;
  } else if(log_level_str == "info") {
    log_level = 2;
  } else if(log_level_str == "warn") {
    log_level = 3;
  } else if(log_level_str == "error") {
    log_level = 4;
  } else if(log_level_str == "fatal") {
    log_level = 5;
  } else {
    log_fatal("log level not found. Enter unexpectd code.");
    return 0;
  }

  log_info("min_threshold = " + min_threshold);
  log_info("max_int = " + max_int);
  log_info("log level = " + log_level);


  file_list = find_recursive_dir(src_dir, recursive);

  if(file_list.length < 1){
    log_info("File not found.");
    return 0;
  }


  setBatchMode(batchmode);
  if(batchmode){
    interval = 0;
  }

  // image separation
  log_info("Starting file separation...");
  rel_images = newArray(0);
  ref_images = newArray(0);
  for(i=0; i < file_list.length; i++){
    fpath = file_list[i];
    fname = File.getName(fpath);
    if(matches(fname, rel_filter)){
      rel_images = Array.concat(rel_images, fpath);
    } else if(matches(fname, ref_filter)){
      ref_images = Array.concat(ref_images, fpath);
    } else {
      log_info("?? " + fpath);
    }
  }
  if(rel_images.length != ref_images.length){
    log_info("Error: The number mismatch. target files = " + rel_images.length + ", reference files = " + ref_images.length);
    return 0;
  }

  run("Colors...", "foreground=white background=black selection=green");
  run("Clear Results");
  run("Set Measurements...", "area mean standard min centroid center perimeter bounding fit shape feret's integrated median stack display redirect=None decimal=3");

  log_info("Starting analysis...");
  for(i=0; i < rel_images.length; i++){
    rel_image_dir = File.getParent(rel_images[i]);
    ref_image_dir = File.getParent(ref_images[i]);
    if(rel_image_dir == ref_image_dir){
      log_info("rel_image: " + File.getName(rel_images[i]));
      log_info("ref_image: " + File.getName(ref_images[i]));
      calc_rel(rel_images[i], ref_images[i], rel_ball, ref_ball, rec_ball, interval, max_int, min_threshold);
    } else {
      log_info("Files are in different directories.");
      log_info("rel_image: " + rel_images[i]);
      log_info("ref_image: " + ref_images[i]);
    }
    if( i == 0){
      //headings = split(String.getResultsHeadings);
      log_info("Writing to " + result_file);
      saveAs("Results", result_file);
      run("Clear Results");
      //File.saveString(getInfo("log"), log_file);
      //print("\\Clear");
    } else {

      log_info("Add results to " + result_file);
      File.append(get_result_string(), result_file);
      run("Clear Results");

      current_memory = parseInt(IJ.currentMemory())/1024/1024; // mega bytes
      max_memory = parseInt(IJ.maxMemory())/1024/1024;
      log_info("Memory usage: " + current_memory + " M bytes / max: " + max_memory + " M bytes");
      if( (((i+1) % 10) == 0 ) || current_memory > (max_memory - 100) ){ // 400 MByte 以上でlogを書き込んでclear
        File.append(getInfo("log"), log_file);
        print("\\Clear");
      }
    }
  }
  // save log to log_file
  log_info("***************************** ANALYSIS END ***********************************************");
  log_info("Save log to " + log_file);
  log_info("Analysis finished. Please see result file: " + result_file);
  log_info("******************************************************************************************");
  File.append(getInfo("log"), log_file);
  //File.saveString(getInfo("log"), log_file);

  close_all_images();

  setBatchMode(false);
}


// rel: 割られる画像(path)
// ref: 割る画像(path)
function calc_rel(relpath, refpath, rel_ball, ref_ball, rec_ball, interval, max_int, min_threshold){
  log_info("Closing all images...");
  close_all_images();

  rel_id = open_image(relpath);
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rel_ball > 0){
    selectImage(rel_id);
    log_info("Target image subtract background with " + rel_ball);
    run("Subtract Background...", "rolling=" + rel_ball);
  }
  relmax_id = open_image(relpath); // 4095 領域を検索用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  ref_id = open_image(refpath);
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(ref_ball > 0){
    selectImage(ref_id);
    log_info("Reference image subtract background with " + ref_ball);
    run("Subtract Background...", "rolling=" + ref_ball);
  }
  refmax_id = open_image(refpath); // 4095 領域を検索用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

  rec_id    = open_image(refpath); // 細胞領域検出用
  run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
  if(rec_ball > 0){
    selectImage(rec_id);
    log_info("Reference image subtract background with " + rec_ball + " for defining cell region");
    run("Subtract Background...", "rolling=" + rec_ball);
  }
  // 画像のopenの順番(stack)は
  // 1. rel
  // 2. relmax(4095用)
  // 3. ref
  // 4. refmax(4095)用
  // 5. div
  slice_rel = 1;
  slice_relmax = 2;
  slice_ref = 3;
  slice_refmax = 4;
  slice_rec = 5;
  slice_div = 6;

  imageCalculator("Divide create 32-bit", rel_id, ref_id);
  div_id = getImageID();
  selectImage(div_id);
  //log_info("Info of Div image = " + getImageInfo());

  relname = File.getName(relpath);
  refname = File.getName(refpath);
  directory = File.getParent(relpath);
  calc_title = relname + "/" + refname;
  rename(calc_title);
  info_wait(interval);
  run("Images to Stack", "name=Stack title=[] use");
  info_wait(interval);
  selectWindow("Stack");
  stack_id = getImageID();

  max = 0;
  dummy = 0;

  // 割る側から4095の領域を除く.
  log_debug("Start removing max intensity from reference image...");
  info_wait(interval);
  setSlice(slice_refmax); // 4095領域を探すstack
  info_wait(interval);
  if(max >= max_int){
    setThreshold(max_int, max_int);
    log_debug("Selecting max intensity regions...");
    run("Create Selection");
    info_wait(interval);
  }
  if( selectionType() != -1 ){
    log_debug("Switch to cell recognition stack.");
    setSlice(slice_rec); // 細胞認識のスタック
    info_wait(interval);
    setForegroundColor(0);
    run("Fill", "slice");
  }
  run("Select None");
  resetThreshold();

  // 割られる側の4095の領域を計算対象から外す
  // ために、割られる側の4095の領域と同じ割る側の領域を
  // 0にする.
  // 割られる側の4095領域を探す画像.
  log_debug("Start removing max intensity from target image...");
  info_wait(interval);
  setSlice(slice_relmax);

  getStatistics(dummy, dummy, dummy, max, dummy , dummy);
  if(max >= max_int){
    setThreshold(max_int, max_int);
    log_debug("Selecting max intensity regions...");
    run("Create Selection");
    info_wait(interval);
  }
  log_info("Done.");
  info_wait(interval);
  if( selectionType() != -1 ){
    log_info("No selection found.");
    info_wait(interval);
    //setSlice(slice_ref);
    setSlice(slice_rec); // 細胞認識のスタック
    setForegroundColor(0);
    info_wait(interval);
    run("Fill", "slice");
    info_wait(interval);
    setSlice(slice_rel);
  }
  run("Select None");
  resetThreshold();


  info_wait(interval);
  //setSlice(slice_ref_max);
  setSlice(slice_rec);
  log_info("Recognize objects.");
  setThreshold(min_threshold, max_int);
  info_wait(interval);
  log_info("Create selection.");
  run("Create Selection");
  // 本当はここで小さな領域を除く処理をしたほうが良いが
  // 小さな領域ならそもそも平均への影響はほぼ無いので無視する
  // ヒント: make binary でanalyze particle でサイズ指定すると
  // 小さな領域は除けるようなのでできないことは無いはず. 要検討.
  info_wait(interval);
  if( selectionType() == -1 ){
    log_info("No object found. skip. File: " + relname );
  } else {
    setSlice(slice_div);
    info_wait(interval);
    run("Measure");
    setResult("Directory", nResults - 1,  directory);
    setResult("target", nResults - 1, relname);
    setResult("reference", nResults - 1, refname);
    info_wait(interval);
    log_debug("The number of current images: " + nImages() );
    log_debug("current Image: " + getImageID() + getImageInfo() );
    log_debug("active?: " + isActive(getImageID()));
  }
  info_wait(interval);
  close_all_images();
}
